// Time Complexity - O(N)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool node(TreeNode *a,TreeNode *b){
        if(!a and !b) return true;
        if(!a and b) return false;
        if(!b and a) return false;
        if(a->val != b->val) return false;
        bool p = node(a->left,b->left) or node(a->left,b->right);
        bool q = node(a->right,b->left) or node(a->right,b->right);
        return p and q;
    }
    bool flipEquiv(TreeNode* root1, TreeNode* root2) {
        return node(root1,root2);
    }
};
