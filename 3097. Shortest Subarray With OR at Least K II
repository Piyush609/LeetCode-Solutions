Time Complexity -> O(2*N)
Space Complexity -> O(31)

class Solution {
    public int minimumSubarrayLength(int[] nums, int k) {
        if(k == 0) return 1;
        int []bit = new int[31];
        Arrays.fill(bit,0);
        int l = 0;
        int r = 0;
        int n = nums.length;
        int x = 0;
        int ans = n + 1;
        while(r < n){
            x |= nums[r];
            for(int j = 0; j < 31; j++){
                if((nums[r] & (1 << j)) > 0) bit[j]++;
            }
            while(x >= k){
                ans = Math.min(ans,r - l + 1);
                for(int j = 0; j < 31; j++){
                    if((nums[l] & (1 << j)) > 0) {
                        if(bit[j] == 1) x ^= (1 << j);
                        bit[j]--;
                    }
                }
                l++;
            }
            r++;
        }
        if(ans == n + 1) ans = -1;
        return ans;
    }
}
