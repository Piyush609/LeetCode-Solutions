// Time Complexity : O(N)
// Space Complexity : O(N)
// Where N = Number of nodes in tree

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    long long kthLargestLevelSum(TreeNode* root, int k) {
        #define int long long
        priority_queue<int>pq;
        queue<TreeNode*>q;
        q.push(root);
        for(;!q.empty();){
            int s = q.size();
            int sum = 0;
            for(int i = 0; i < s; i++){
                auto x = q.front();
                sum += x->val;
                if(x->left) q.push(x->left);
                if(x->right) q.push(x->right);
                q.pop();
            }
            pq.push(-sum);
            if(pq.size() > k) pq.pop();
        }
        if(pq.size() == k) return -pq.top();
        return -1;
        #undef int
    }
};
