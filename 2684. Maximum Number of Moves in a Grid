// Time Complexity -> O (N*M)
// Space Complexity -> O (N)
// N = Number of rows
// M = Number of columns

class Solution {
public:
    int maxMoves(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        int mx = 0;
        vector<int>curr(n,0),prev(n,0);
        for(int j = 1; j < m; j++){
            for(int i = 0; i < n; i++){
                curr[i] = 0;
                if(i - 1 >= 0 and grid[i][j] > grid[i - 1][j - 1]){
                    curr[i] = max(curr[i], prev[i - 1] + 1);
                }
                if(i + 1 < n and grid[i][j] > grid[i + 1][j - 1]){
                    curr[i] = max(curr[i], prev[i + 1] + 1);
                }
                if(grid[i][j] > grid[i][j - 1]){
                    curr[i] = max(curr[i], prev[i] + 1);
                }
                if(curr[i] == 0)
                    curr[i] = -1e9;
                mx = max(mx,curr[i]);
            }
            swap(prev,curr);
        }
        return mx;
    }
};
